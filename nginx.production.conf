upstream unicorn {

  server unix:/home/media/current/tmp/sockets/unicorn.sock fail_timeout=0;
}

server {
   listen 80;
   server_name you-46.com;
   rewrite ^https://you-46.com$request_uri? permanent;
   location /.well-known/acme-challenge/ {
       root /etc/lego/webroot;
   }
}

server {

  listen       443 ssl http2;
  server_name  you-46.com;
  # ----------------- Settings ------------------------

  server_tokens off;
  root /home/media/current/public;

  client_max_body_size 10M;
  #charset koi8-r;
  access_log  /var/log/nginx/media.access.log main;
  error_log /var/log/nginx/media_error.log;

  location = /health.txt {
    access_log off;
    empty_gif;
    break;
  }

  # SSL
  ssl_certificate      /etc/lego/certificates/you-46.com.crt;
  ssl_certificate_key  /etc/lego/certificates/you-46.com.key;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  # 環境によっては off にすると動かないので注意 (default は on)
  ssl_session_tickets on;
  ssl_dhparam /home/media/dhparam.pem;
  ssl_prefer_server_ciphers on;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  
  # POODLE対策でSSLv1〜3は有効にしない
   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    location /.well-known/acme-challenge/ {
       root /etc/lego/webroot;
   }

  # index.htmlは301
  location ~ /(.*)index.html {
    return 301 https://$host/$1;
  }

  #if ($http_x_forwarded_proto != https) {
  #  return 301 https://$host$request_uri;
  #}

  #if ($host !~ ^you-46.com$ ) {
  #  return 301 https://you-46.com$request_uri;
  #}

  # ------------------ Location 変数 ------------------------

  location @unicorn {

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Proto https;
    #proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-Port 443;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Requested-With $http_x_requested_with;
    proxy_pass http://unicorn;
    proxy_read_timeout 180s;
  }

  location @proxy_cache {

    proxy_ignore_headers Cache-Control Set-Cookie;

    # デバイス判定
    set $devise pc_;
    if ($http_user_agent ~ (iPhone|Android)) {
      set $devise sp_;
    }

    # Ajax判定
    set $xhr '';
    if ($http_x_requested_with = XMLHttpRequest) {
      set $xhr xhr_;
    }

    # cacheするkey
    set $proxy_cache_key $devise$xhr$host$request_uri;

    proxy_no_cache 0;
    proxy_cache_bypass 0;
    proxy_cache zone1;
    proxy_cache_key $proxy_cache_key;
    proxy_cache_valid 200 302 304 240m;
    proxy_cache_valid 404 1m;

    add_header X-Nginx-Cache $upstream_cache_status;
    add_header X-Nginx-Cache-Key $proxy_cache_key;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Port 443;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Requested-With $http_x_requested_with;
    proxy_pass http://unicorn;
    proxy_read_timeout 180s;
  }

  # ------------------ Locations ------------------------

  location / {
    #try_files $uri @proxy_cache;
    try_files $uri @unicorn;
  }

  location = /service_worker.js {
    try_files $uri @unicorn;
  }

  # 静的ファイル
  location ^~ /assets/ {
      gzip on;
      gzip_static always;
      expires 10d;
      access_log off;

      add_header X-Nginx-Location assets;
  }

  # webpack
  location ^~ /packs/ {
      expires 10d;
      access_log off;

      add_header X-Nginx-Location packs;
  }

  location ~ /storage.*\.(jpe?g|gif|png|svg|css|js|ico|swf|inc)$ {
      try_files $uri @unicorn;
  }

  location ~ .*\.(jpe?g|gif|png|svg|css|js|ico|swf|inc)$ {
      expires 10d;
      access_log off;

      add_header X-Nginx-Location static;
  }

  location ~ /rails/active_storage.*\.(jpe?g|gif|png|svg|css|js|ico|swf|inc)$ {
      try_files $uri @unicorn;
  }

}
